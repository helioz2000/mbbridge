// mbbridge configuration file

// This value determines the granularity of the measuring system
mainloopinterval = 250;		// [ms]

// MQTT broker parameters
mqtt = {
	broker = "127.0.0.1";
	debug = false;			// only works in command line mode
	retain_default = true;			// mqtt retain setting for publish
	noreadonexit = true;	// publish noread value of all tags on exit
	clearonexit = true;		// clear all tags from mosquitto persistance store on exit
};

// MQTT subscription list - modbus slave write registers
// the topics listed here are written to the slave whenever the broker publishes
// topic = mqtt topic to subscribe
// slaveid = modbus slave address to write
// address = modbus slave register address to write
// type = tag type, i=input, q=output, r=register (16bit)
mqtt_tags = (
	{
	topic = "binder/home/test/q0";
	slaveid = 30;
	address = 0;
	datatype = "q";
	},
	{
	topic = "binder/home/test/q1";
	slaveid = 30;
	address = 1;
	datatype = "q";
	},
	{
	topic = "binder/home/test/q2";
	slaveid = 30;
	address = 2;
	datatype = "q";
	}
)

// Modbus RTU interface configuration
// only one interface device is allowed
modbusrtu = {
	device = "/dev/ttyUSB0";		// mandatory
	baudrate = 1200;				// mandatory
// optional parameters:
	responsetimeout_us = 500000;	// useconds
	responsetimeout_s = 0;			// seconds
	debuglevel = 1;					// 0 = off 1 = basic, 2 = protocol details (only works when not run as system daemon)
	slavestatustopic = "binder/modbus/slavestatus/"	// the topic to publish slave online/offline status
};

// Updatecycles definition
// every modbus tag is read in one of these cycles
// id - a freely defined unique integer which is referenced in the tag definition
// interval - the time between reading, in seconds
updatecycles = (
	{
	id = 1;
	interval = 10;	// seconds
	},
	{
	id = 2;
	interval = 20;
	},
	{
	id = 3;
	interval = 30;
	},
	{
	id = 6;
	interval = 60;
	},
	{
	id = 12;
	interval = 120;		// 2 minutes
	},
	{
	id = 30
	interval = 300;		// 5 minutes
	},
	{
	id = 60;
	interval = 600;		// 10 minutes
	},
	{
	id = 180;
	interval = 1800;	// 30 minutes
	}
)

// MQTT publish list - modbus slave read registers
// definition of every modbus slave and it's associated tags
// name = a freely definable name
// id = the modbus slave RTU address
// enabled = true or false to disable (ignore) any tags in slave
// tags = a list of tag definitions to be read at the indicated interval
//
// tag parameter description:
// address = the holding register address of the tag in the modbus device
// group = consecutive tags with same group number [>0] will be processed in a single modbus request
// update_cycle = the id of the cycle for updating and publishing this tag
// topic = mqtt topic under which to publish the value, en empty string will revent pblishing
// retain = retain value for mqtt publish
// format = printf style format for mqtt publication, NOTE: all values are type "float"
// multiplier = raw value will be multiplied by this factor
// offset = value to be added after above multiplication
// noread = value published when modbus read fails
mbslaves = (
	{
	name = "board 30";
	id = 30;
	enabled = TRUE;
	tags = 
		(
			{
			address = 100;
			update_cycle = 1;		// as per "updatecycles" configuration
			topic = "binder/home/test/a100";
            retain = FALSE;
			format = "%.0f"
			multiplier = 1.0;
			offset = 0.0;
			noread = 0.0;
			},
			{
			address = 101;
			update_cycle = 1;
			topic = "binder/home/test/a101";
			retain = FALSE;
			format = "%.0f"
			multiplier = 1.0;
			offset = 0.0;
			noread = 0.0;
			},
			{
			address = 103;
			group = 1;
			update_cycle = 1;
			topic = "binder/home/test/a103";
			},
			{
			address = 104;
			group = 1;
			update_cycle= 1;
			topic = "binder/home/test/a104";
			},
			{
			address = 106;
			group = 1;
			update_cycle = 1;
			topic = "binder/home/test/a106";
			},
			{
			address = 108;
			update_cycle = 1;
			topic = "binder/home/test/a108";
			}
		)
	},
	{
	name = "board 30-2"
	id = 30;
	enabled = TRUE;
	tags = 
		(
			{
			address = 109;
			update_cycle = 1;		// as per "updatecycles" configuration
			topic = "binder/home/test/a109";
			format = "%.0f"
			multiplier = 1.0;
			offset = 0.0;
			noread = 0.0;
			}
		);
	}
)

// read and publish pi cpu temperature
// delete if not desired
cputemp = {
	topic = "binder/home/mqtt/pi/cpu/temp";
	readinterval = 5;
	publishinterval = 5;
};

